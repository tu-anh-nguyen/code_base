name: CI on Hotfix Merge

on:
  push:
    branches:
      - dev


env:

jobs:
  Git_Tag:
    runs-on: ubuntu-latest
    name: Create and update new git tag test
    steps:
      - name: Checkout code-base code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Determine tag version
        id: determine-tag
        run: |
          branch_name="hotfix-2.1000.0"
          # branch_name=GITHUB_HEAD_REF
          echo "branch_name: $branch_name $GITHUB_REF"

          if [[ $branch_name =~ hotfix-([0-9]+\.[0-9]+\.[0-9]+) ]]; then
              base_tag_pattern=$(echo ${BASH_REMATCH[1]} | awk -F'.' '{print $1"."$2".*"}')
              latest_version=$(git tag --list ${base_tag_pattern} | sort -V | tail -n 1)
              echo "base_tag_pattern: $base_tag_pattern"
              echo "Latest version: $latest_version"
              echo "latest_version=$latest_version" >> $GITHUB_OUTPUT

              patch_version=$(echo $latest_version | cut -d'.' -f3)
              new_patch_version=$((patch_version + 1))
              new_version=$(echo $latest_version | awk -F'.' -v new_patch="$new_patch_version" '{print $1"."$2"."new_patch}')
              echo "New version: $new_version"
              echo "version=$new_version" >> $GITHUB_OUTPUT
              echo "base_branch=$branch_name" >> $GITHUB_OUTPUT
          else
              echo "No tag found."
              exit 1
          fi

      - name: Git Tag
        id: new-code-base-tag
        run: |
          tag=${{ steps.determine-tag.outputs.version }}
          echo "Tag: $tag"
          git tag $tag
          git push --tags

      - name: Determine source branch ref
        id: determine-source-branch-ref

        run: |
          branch_name="hotfix-2.1000.0"
          echo "branch_name: $branch_name $GITHUB_REF ${{ steps.determine-tag.outputs.base_branch }}"
          # base_branch_name=${{ steps.determine-tag.outputs.base_branch }}
          # branch_name=GITHUB_HEAD_REF
          if [[ $branch_name =~ hotfix-([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            patch_version=$(echo "${BASH_REMATCH[1]}" | awk -F'.' '{print $3}')
            new_patch_version=$((patch_version + 1))
            base_tag_pattern=$(echo "${BASH_REMATCH[1]}" | awk -F'.' '{print $1"."$2".*"}')

            # Check if branch exists on source
            if git ls-remote --exit-code --heads "https://github.com/tu-anh-nguyen/source_repo.git" "${branch_name}"; then
              echo "Branch ${branch_name} exists in source."
              branch_ref="${branch_name}"
            else
              echo "Branch ${branch_name} does not exist in source."
              latest_tag=$(git ls-remote --tags "https://github.com/tu-anh-nguyen/source_repo.git" "${base_tag_pattern}" | sort -V | tail -n 1 | awk '{print $2}' | sed 's|refs/tags/||')
              if [[ -z "$latest_tag" ]]; then
                echo "No tags found in source repository for ${base_tag_pattern}. Using mainline."
                branch_ref="mainline"
              else
                echo "Using latest tag ${latest_tag} from source repository."
                branch_ref="tags/${latest_tag}"
              fi
            fi

            echo "branch_ref=$branch_ref" >> $GITHUB_OUTPUT
          else
            echo "Invalid branch name format."
            exit 1
          fi

      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          repository: tu-anh-nguyen/source_repo
          path: source
          ref: ${{ steps.determine-source-branch-ref.outputs.branch_ref}}

      - name: Git Tag Source repo
        id: new-source-base-tag
        run: |
          pwd
          tag=${{ steps.determine-tag.outputs.version }}
          echo "Tag: $tag"
          git tag $tag
          git push --tags
        working-directory: source

    outputs:
      tag: ${{ steps.new-tag.outputs.gittag }}
